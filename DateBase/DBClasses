from sqlalchemy import *
from sqlalchemy.orm import declarative_base

Base = declarative_base()
meta = MetaData()


class Users(Base):
    __tablename__ = 'users'
    user_id = Column('user_id', Integer, primary_key=True)
    name = Column('name', VARCHAR(50), nullable=false)
    second_name = Column('second_name', VARCHAR(50), nullable=false)
    phone = Column('phone', VARCHAR(12), nullable=False)
    email = Column('email', VARCHAR(50), nullable=False)
    CheckConstraint('email LIKE "%_@_%._%"', name='email')
    CheckConstraint('phone LIKE "\+79([0-9]{9})"', name='phone')


class Colours(Base):
    __tablename__ = 'colours'
    colour_id = Column('colour_id', Integer, primary_key=True)
    colour_name = Column('colour_name', VARCHAR(30), nullable=False)


class Diler(Base):
    __tablename__ = 'diler'
    diler_id = Column('diler_id', Integer, primary_key=True)
    diler_name = Column('diler_name', VARCHAR(20), nullable=False)
    is_related = Column('is_related', Boolean, nullable=False)


class Furniture(Base):
    __tablename__ = 'furniture'
    id = Column('id', BigInteger, primary_key=True)
    height = Column('height', Float(20), nullable=False)
    depth = Column('depth', Float(20), nullable=False)
    length = Column('length', Float(20), nullable=False)
    ship_name = Column('ship_name', BigInteger, ForeignKey('shipment.ship_id'))
    cost = Column('cost', Integer, nullable=False)
    CheckConstraint('cost > 0', name='cost')
    CheckConstraint('height between 0.1 and 5', name='height')
    CheckConstraint('depth between 0.1 and 5', name='depth')
    CheckConstraint('length between 0.3 and 10', name='length')


class Shipment(Base):
    __tablename__ = 'shipment'
    ship_id = Column('ship_id', BigInteger, primary_key=True)
    ship_date = Column('ship_date', TIMESTAMP, nullable=False)
    weight = Column('weight', Float(30), nullable=False)
    diler_id = Column('diler_id', Integer, ForeignKey(Diler.diler_id))
    CheckConstraint('weight > 0.5', name='weight')
    CheckConstraint('is_related = True', name='ship_id')


class Sofa(Base):
    __tablename__ = 'sofa'
    id = Column('id', BigInteger, ForeignKey('furniture.id'))
    num_seats = Column('num_seats', Integer, nullable=False)
    corner = Column('corner', Boolean, nullable=False)
    expand = Column('expand', Boolean, nullable=False)
    CheckConstraint('num_seats > 0', name='num_seats')
    __mapper_args__ = {'primary_key': [id, num_seats]}


class Wardrobe(Base):
    __tablename__ = 'wardrobe'
    id = Column('id', BigInteger, ForeignKey('furniture.id'))
    num_shelfs = Column('num_shelfs', Integer, nullable=False)
    CheckConstraint('num_shelfs', name='num_shelfs')
    __mapper_args__ = {'primary_key': [id, num_shelfs]}


class Stol(Base):
    __tablename__ = 'stol'
    id = Column('id', BigInteger, ForeignKey('furniture.id'))
    expand = Column('expand', Boolean, nullable=False)
    __mapper_args__ = {'primary_key': [id, expand]}


class Basket(Base):
    __tablename__ = 'basket'
    stuff_id = Column('stuff_id', BigInteger, ForeignKey('furniture.id'))
    order_date = Column('order_date', TIMESTAMP, nullable=False)
    quantity = Column('quantity', Integer, nullable=False)
    CheckConstraint('quantity > 0', name='quantity')
    __mapper_args__ = {'primary_key': [stuff_id, order_date]}


class Order(Base):
    __tablename__ = 'order'
    user_id = Column('user_id', BigInteger, ForeignKey('user.user_id'))
    order_date = Column('order_date', TIMESTAMP, nullable=False)
    order_cost = Column('order_cost', Float(15), nullable=False)
    CheckConstraint('order_cost > 0', name='order_cost')
    __mapper_args__ = {'primary_key': [user_id, order_date]}
